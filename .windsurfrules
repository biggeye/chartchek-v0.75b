1.  nextjs15 with app router configuration
2.  supabase authentication
3.  supabase postgresql database
4.  zustand for state management
5.  openai assistant api
6.  kipu emr

### CACHING IMPLEMENTATION ###

redis @ /lib/cache/redis.ts
react-query @ /lib/cache/react-query/config.ts

### KIPU INTEGRATION ###

always check /lib/kipu/integration/ref/endpoint.json for the source of truth regarding KIPU EMR API endpoints.
always check /lib/kipu/integration/ref/schemas.json for the source of truth regarding KIPU EMR API schemas.


### UI / UX DEVELOPMENT ###
always check the /components/* and /components/ui/* directory for the current component being developed, in case one already exists, please utilize.

Ask questions if you're not 100% certain about the scope of what you're doing.  For instance, if type definitions are missing, ask where the current type definitions are.  Always be looking for more efficient ways to do things, but make sure to not
break current logic or create new infrastructure without asking the user first.

when refactoring code, start with the simplest solution, and always ask the user before expanding beyond the scope of the document referenced.

when dealing with typescript problems, assume there are interfaces and types to be found elseewhere, but if you are to create a new type or interface,
always make sure its in-line at the top of the current document so that it can be integrated into the type definitions.

this project consists of a nextjs15 app, using app-router configuration, with supabase for authentication and postgresql for the database.
we are using zustand for state management.

we have an api system for interacting with the OpenAI API, specifically the Assistant API (v2 beta).

We are integrating with KIPU EMR, a platform for managing the medical records of behavioral health and substance abuse treatment facilities.

*** GUIDELINES ***
-front end request for KIPU data:
** fetch from /store/* **
** store calls /api/kipu/* **
** endpoints utilize service layers @ /lib/kipu/service/* **

-supabase instantiations exist as utility files (/utils/supabase/ *) and are to be utilized whenever needed.
-typescript interfaces and definitions exist (/types/ * ) and are also to be utilized whenever needed.  In the need for new interfaace or type definitions, after ensuring it does not already exist, define the interface or type **in-line with the new logic utilizing it** so that it can be integrated to the master definitions later.
-state management is managed with Zustand over a set of different stores (/store/ *).  These files have their own type definitions (/types/store/ *).
