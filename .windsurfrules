This system is built upon:

Next.js 15 (App Router Configuration) for routing and SSR.

Supabase for authentication and PostgreSQL database integration.

Zustand for application state management.

OpenAI Assistant API (v2 Beta) for natural language processing tasks.

KIPU EMR integration for managing behavioral health and substance abuse treatment records.


ðŸ”— KIPU EMR Integration
The KIPU auth logic is not to be modified (/lib/kipu/auth/*)

when factoring new logic, adhere to the patterns established which include utilizing the server and auth functions for API headers, signatures, etc

Data Flow Protocol for KIPU:
UI components fetch data exclusively from Zustand stores (/store/*).

Stores call API endpoints (/api/kipu/*), which in turn call service layers at (/lib/kipu/service/*).

Avoid direct KIPU API interactions from the frontendâ€”always go through stores.

ðŸŽ¨ UI/UX Component Development
Reuse existing UI components found in:

/components/*

/components/ui/*

Always search these directories thoroughly before creating new components.

ðŸš© General Development Guidelines
Ask first:
If unsure about a scope, functionality, existing logic, or infrastructure changes, ask the user for clarification. Do not assume or guess.

Code Refactoring:

Start with the simplest solution.

Confirm expansions or significant changes with the user first.

Typescript Types and Interfaces:

Primary type definitions reside in /types/* and specific store types in /types/store/*.

Always check existing definitions thoroughly before creating new ones.

If a new type or interface is required, define it inline at the top of the document using it, clearly commenting it for later migration.